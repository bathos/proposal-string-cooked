<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: String.cooked
stage: -1
contributors: Darien Maillet Valentine
</pre>

<h2>New API</h2>

<p>This adds a builtin static method to String</p>

<p>
  Added under
  <a href="https://tc39.es/ecma262/#sec-properties-of-the-string-constructor">
    Properties of the String Constructor</a>:
</p>

<emu-clause id="sec-string.cooked">
  <h1>String.cooked ( _template_, ..._substitutions_ )</h1>
  <p>The `String.cooked` function may be called with a variable number of arguments. The first argument is _template_ and the remainder of the arguments form the List _substitutions_. The following steps are taken:</p>
  <emu-alg>
    1. Let _numberOfSubstitutions_ be the number of elements in _substitutions_.
    1. Let _cooked_ be ? ToObject(_template_).
    1. Let _literalSegments_ be ? LengthOfArrayLike(_cooked_).
    1. If _literalSegments_ &le; 0, return the empty String.
    1. Let _stringElements_ be a new empty List.
    1. Let _nextIndex_ be 0.
    1. Repeat,
      1. Let _nextKey_ be ! ToString(ùîΩ(_nextIndex_)).
      1. Let _nextVal_ be ? Get(_cooked_, _nextKey_).
      1. If Type(_nextVal_) is Undefined, throw a *TypeError* exception.
      1. Let _nextSeg_ be ? ToString(_nextVal_).
      1. Append the code unit elements of _nextSeg_ to the end of _stringElements_.
      1. If _nextIndex_ + 1 = _literalSegments_, then
        1. Return the String value whose code units are the elements in the List _stringElements_. If _stringElements_ has no elements, the empty String is returned.
      1. If _nextIndex_ &lt; _numberOfSubstitutions_, let _next_ be _substitutions_[_nextIndex_].
      1. Else, let _next_ be the empty String.
      1. Let _nextSub_ be ? ToString(_next_).
      1. Append the code unit elements of _nextSub_ to the end of _stringElements_.
      1. Set _nextIndex_ to _nextIndex_ + 1.
  </emu-alg>

  <emu-note>
    <p>The `cooked` function implements behavior suitable for a tag function of a Tagged Template (<emu-xref href="#sec-tagged-templates"></emu-xref>). When called as such, the first argument will be a well formed template object and the rest parameter will contain the substitution values. In practice, it is more useful as a function which custom tag functions _delegate_ to as a final step.</p>
  </emu-note>

  <emu-note type="editor">
    <p>The specification text here is nearly identical to that for `String.raw`. I expect that if this proposal were to gain traction, this would end up refactored. The differences are that the object strings are read from is `template` rather than `template.raw` and that it will throw if a cooked value is undefined.
  </emu-note>
</emu-clause>
